@using System.Collections.Generic
@using System.Web.UI.WebControls

@using Spartane.Core.Domain.Permission
@using Spartane.Web.Areas.WebApiConsumer
@using Spartane.Web.Helpers
@{
    ViewBag.Title = "Spartan - Bars Graphic";
    //ViewBag.dataReport = ((string)ViewBag.dataReport).Replace(@"&quot;", @"""");
    string dataReport = Uri.UnescapeDataString((string)ViewBag.dataReport);
}
<style>
    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        @*<h2>@Resources.VendedorResources.Vendedor</h2>*@
        <h2>Bars Graphic</h2>

        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">@Resources.Resources.Home</a>

            </li>
            <li class="active">
                @*<strong>@Resources.VendedorResources.Vendedor</strong>*@
                <strong>Bars Graphic</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>

<input type="hidden" value="list" name="Operation" id="Operation" />
<input type="hidden" value="true" name="IsFilterModal" id="IsFilterModal" />

<link href='http://fonts.googleapis.com/css?family=Open+Sans:300,600,400' rel='stylesheet' type='text/css'>

<span id="popupNotification"></span>
<div aria-hidden="true" data-backdrop="static" class="modal" id="AddEditFiltersModal-form" style="display: none; background-color:rgba(0, 0, 0, 0.7);">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    @Resources.Resources.AdvanceFilter
                    <button data-dismiss="modal" class="close" type="button"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                </h4>
            </div>
            <div class="modal-body AddEditFiltersModal">
            </div>
        </div>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <input type="hidden" value="@ViewBag.IdReport" name="IdReport" id="IdReport" />
                    <div>
                        <input data-target="#advance-modal" data-toggle="modal" type="button" value="@Resources.Resources.AdvanceFilter" id="AdvanceFilter" class="btn btn-w-m btn-success btn-filter" />
                        <a href="../ClearFilter?id=@ViewBag.IdReport" class=" btn btn-primary">@Resources.Resources.ClearFilter</a>
                    </div>

                    <div id="jsGrid">
                    </div>

                    @* Model Start Here *@

                    @using (Ajax.BeginForm("", "", new AjaxOptions { OnSuccess = "" }))
                    {

                    }

                    @* Model Print Start*@
                    <div id="exportModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="gridSystemModalLabel">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                    <h4 class="modal-title" id="gridSystemModalLabel">Export options</h4>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-md-3">Export option:</div>
                                        <div class="col-md-8 col-md-offset-0">
                                            <label class="">
                                                <input type="radio" name="optradio" value="1" checked="true">Export only current page records
                                            </label>
                                            <label class="">
                                                <input type="radio" name="optradio" value="0">Export all records
                                            </label>
                                        </div>
                                    </div>
                                    <div class="row">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                    <button type="button" id="btnPrint" class="btn btn-primary" onclick="return PrintDocument(3);">Export</button>
                                    <button type="button" id="btnPdf" class="btn btn-primary" onclick="return Export(1);">Export</button>
                                    <button type="button" id="btnExcel" class="btn btn-primary" onclick="return Export(2);">Export</button>
                                    <button type="button" id="btnCSV" class="btn btn-primary" onclick="return Export(4);">Export</button>
                                </div>
                            </div>
                            <!-- /.modal-content -->
                        </div><!-- /.modal-dialog -->
                    </div>

                    <div>
                        @*@Html.ActionLink(Resources.Resources.Create, "Create", "Vendedor", new { @class = ("btn btn-primary" + (!permission.New ? " disabled" : "")) })*@
                        @*@Html.ActionLink(@Resources.Resources.AdvanceSearch, "ShowAdvanceFilter", "Vendedor", new { previousFilters = advanceSearch }, new { @class = ("btn btn-primary") })*@
                        @*<button onclick="ClearFilter()" class=" btn btn-primary">@Resources.Resources.ClearFilter</button>*@
                    </div>
                    <div class="table-responsive">

                        @*<table id="tblReport" class="table table-striped table-bordered table-hover dataTables-example scroll_content" style="overflow-x:scroll;" cellspacing="0"></table>*@

                        <span id="flot-chart"></span>
                        <div style="width:100%;">
                            <button class="btn btn-primary float-right" id="printGraph"><i class="fa fa-print"></i>&nbsp;Imprimir</button>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .dataTables_filter {
        display: none;
    }

    div.dataTables_info {
        display: inline-block;
        float: left;
    }

    .highcharts-credits {
        display: none;
    }
</style>

<script type="text/javascript">
    var chart;

    $(document).ready(function () {
        $("#frmAdvanceSearch").submit(function (e) {
            e.preventDefault();
            InitiateAdvanceSearch();
        });

        var strData = '@Html.Raw(dataReport)';
        var jsonData = JSON.parse(strData);

        var dataGraphic = {};

        if (Object.keys(jsonData[0]).length === 2) {
            dataGraphic = getSingleBarData(jsonData);
            renderSingleBarChart(dataGraphic, jsonData);
        } else {
            dataGraphic = getMultipleBarData(jsonData);
            renderMultipleBarChart(dataGraphic);
        }

        $("#printGraph").click(function () {
            chart.print();
        });
    });

    function renderSingleBarChart(dataGraphic, jsonData) {
        var fieldX = Object.keys(jsonData[0])[0];
        var fieldY = Object.keys(jsonData[0])[1];

        // Create the chart
        chart = Highcharts.chart('flot-chart', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Bars Report',
            },
            xAxis: {
                type: 'category'
            },
            yAxis: {
                title: {
                    text: fieldY
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '{point.y:.1f}'
                    }
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b><br/>'
            },

            series: [{
                name: fieldX,
                colorByPoint: true,
                data: dataGraphic
            }]
        });

        setTimeout(function () { $(".highcharts-credits").css("display", "none"); }, 200);
    }

    function renderMultipleBarChart(dataGraphic) {
        var categories = getMultipleBarCategories(dataGraphic);
        var renglones = getMultipleBarRenglones(dataGraphic);
        var data = formatMultipleBarData(dataGraphic, categories, renglones);

        chart = Highcharts.chart('flot-chart', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Multiple Bars Report'
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                floating: true,
                borderWidth: 1,
                backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
            },
            xAxis: {
                categories: categories,
                crosshair: true
            },
            yAxis: {
                min: 0,
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: data
        });
    }

    function getMultipleBarCategories(dataGraphic) {
        var arr = [];

        dataGraphic.forEach(function (item, index) {
            arr.push(item["category"]);
        });

        arr = $.grep(arr, function (v, k) {
            return $.inArray(v, arr) === k;
        });

        return arr
    }

    function getMultipleBarRenglones(dataGraphic) {
        var arr = [];

        dataGraphic.forEach(function (item, index) {
            arr.push(item["renglon"]);
        });

        arr = $.grep(arr, function (v, k) {
            return $.inArray(v, arr) === k;
        });

        return arr
    }

    function getSingleBarData(jsonData) {
        var dataSet = [];
        jsonData.forEach(function (item, index) {
            var fieldName = Object.keys(jsonData[0])[0];
            var fieldY = Object.keys(jsonData[0])[1];
            dataSet.push({ name: item[fieldName], y: item[fieldY], drilldown: item[fieldName]});
        });
        return dataSet
    }

    function getMultipleBarData(dataGraphic) {
        var dataSet = [];
        dataGraphic.forEach(function (item, index) {
            var fieldCol, fieldRenglon, fieldValor;
            Object.keys(item).map(function (k) {
                if (k.indexOf("Columna") !== -1)
                    fieldCol = k;
                if (k.indexOf("Renglón") !== -1)
                    fieldRenglon = k;
                if (k.indexOf("Valor") !== -1)
                    fieldValor = k;
            });
            dataSet.push({ category: item[fieldCol], renglon: item[fieldRenglon], valor: item[fieldValor] });
        });


        return dataSet
    }

    function formatMultipleBarData(dataGraphic, categories, renglones) {
        var result = [];
        renglones.forEach(function (itemRenglon, indexRenglon) {
            var renglon = [];
            categories.forEach(function (itemCategory, indexCategory) {
                dataGraphic.forEach(function (itemData, indexData) {
                    if (itemData.renglon === itemRenglon && itemData.category === itemCategory) {
                        value = itemData.valor;
                        renglon.push(value);
                    }
                });
            });
            result.push({ name: itemRenglon, data: renglon });
        });

        return result;
    }

    function isDate(str) {
        var dateReg = /^\d{4}[./-]\d{2}[./-]\d{2}T\d{2}:\d{2}:\d{2}$/;
        return dateReg.test(str);
    }

    var advanceSearchQuery = "", isVendedorTextSearch = true;

    $('#AdvanceFilter').click(function () {
        ajaxindicatorstart('Loading data.. please wait..');
        GetFiltersPopup();
    });

    function GetFiltersPopup() {
        $.ajax({
            url: "@Url.Action("ShowAdvanceFilter", ((Spartane.Core.Domain.SpartaneObject.SpartaneObject)ViewBag.Object).URL)",
            type: "GET",
        async: true,
        success: function (data) {
            $(".AddEditFiltersModal").html(data);
            $('.AddEditFiltersModal form').data('validator', null);
            $.validator.unobtrusive.parse('.AddEditFiltersModal form');
            $('#AddEditFiltersModal-form').modal('show');
            ajaxindicatorstop();
        },
        error: function () {
            ajaxindicatorstop();
        }
    });
    }
</script>

@section Styles {
}

@section Scripts {
@Scripts.Render("~/Scripts/BootstrapDatePicker/moment.js")
}
<script src="~/Scripts/plugins/highcharts/highcharts.js"></script>
<script src="~/Scripts/plugins/highcharts/modules/data.js"></script>
<script src="~/Scripts/plugins/highcharts/modules/exporting.js"></script>
