@using System.Collections.Generic
@using System.Web.UI.WebControls


@using Spartane.Core.Domain.Permission
@using Spartane.Web.Areas.WebApiConsumer
@using Spartane.Web.Helpers
@{
    ViewBag.Title = "Spartan - Detailed Report";
    //ViewBag.dataReport = ((string)ViewBag.dataReport).Replace(@"&quot;", @"""");
    string dataReport = Uri.UnescapeDataString((string)ViewBag.dataReport);
}
<style>
    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        @*<h2>@Resources.VendedorResources.Vendedor</h2>*@
        <h2>Detailed Report</h2>

        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">@Resources.Resources.Home</a>

            </li>
            <li class="active">
                @*<strong>@Resources.VendedorResources.Vendedor</strong>*@
                <strong>Detailed Report</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>

<input type="hidden" value="list" name="Operation" id="Operation" />
<input type="hidden" value="true" name="IsFilterModal" id="IsFilterModal" />

<link href='http://fonts.googleapis.com/css?family=Open+Sans:300,600,400' rel='stylesheet' type='text/css'>

<span id="popupNotification"></span>
<div aria-hidden="true" data-backdrop="static" class="modal" id="AddEditFiltersModal-form" style="display: none; background-color:rgba(0, 0, 0, 0.7);">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    @Resources.Resources.AdvanceFilter
                    <button data-dismiss="modal" class="close" type="button"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                </h4>
            </div>
            <div class="modal-body AddEditFiltersModal">
            </div>
        </div>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <input type="hidden" value="@ViewBag.IdReport" name="IdReport" id="IdReport" />

                    <div id="jsGrid">
                    </div>
                    <div>
                        <input data-target="#advance-modal" data-toggle="modal" type="button" value="@Resources.Resources.AdvanceFilter" id="AdvanceFilter" class="btn btn-w-m btn-success btn-filter" />
                        <a href="../ClearFilter?id=@ViewBag.IdReport" class=" btn btn-primary">@Resources.Resources.ClearFilter</a>
                    </div>

                    @* Model Start Here *@

                    @using (Ajax.BeginForm("", "", new AjaxOptions { OnSuccess = "" }))
                    {

                    }

                    @* Model Print Start*@
                    <div class="table-responsive">
                        <table id="tblReport" class="table table-striped table-bordered table-hover dataTables-example scroll_content" style="overflow-x:scroll;" cellspacing="0"></table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .dataTables_filter {
        display: none;
    }

    div.dataTables_info {
        display: inline-block;
        float: left;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        $("#frmAdvanceSearch").submit(function (e) {
            e.preventDefault();
            InitiateAdvanceSearch();
        });

        var strData = '@Html.Raw(dataReport)';
        var jsonData = JSON.parse(strData);
        var model = generateModel(jsonData);

        $("#tblReport").DataTable(model);

    });

    function generateModel(gridData, modelId) {
        var model = {},
            dateFields = [];
        //model[modelId] = modelId;
        var columns = [];
        var targetsRight = [];
        var targetsCenter = [];
        var indice = 0;
        for (var property in gridData[0]) {
            var propType = typeof gridData[0][property];
            var value = gridData[0][property];

            if (isDate(value)) propType = "date";

            if (propType == "number") {
                columns.push({
                    //type: "number",
                    title: property,
                    render: $.fn.dataTable.render.number( ',', '.', 2 )
                });

                var floatReg = /^[0-9]+(.[0-9]{1,2})?$/;
                if(floatReg.test(value)) targetsRight.push(indice);
            } else if (propType == "boolean") {
                columns.push({
                    //type: "boolean",
                    title: property
                });
            } else if (propType == "string") {
                columns.push({
                    title: property
                });
            } else if (propType == "date") {
                columns.push({
                    title: property,
                    render: function ( data, type, row ) {
                        // If display or filter data is requested, format the date
                        if ( type === 'display' || type === 'filter' ) {
                            //var rowvalue = row["EventDate"];
                            //var rowvalueallday = row["AllDayEvent"];
                            //if (rowvalueallday == 0) {
                            //    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                            //} else {
                            return (moment(data).format("DD/MM/YYYY"));
                            //}
                        }
                        // Otherwise the data type requested (`type`) is type detection or
                        // sorting data, for which we want to use the raw date value, so just return
                        // that, unaltered
                        return data;
                    }
                });
                targetsCenter.push(indice);
            }else {
                columns.push({
                    title: property
                });
            }

            indice++;
        }

        var dataSet = [];
        gridData.forEach(function (item, index) {
            var row = [];
            for (var field in item) {
                row.push(item[field]);
            }
            dataSet.push(row);
        });

        model.data = dataSet;
        model.columns = columns;
        model.columnDefs = [
            { className: "text-right", targets: targetsRight },
            { className: "text-center", targets: targetsCenter }
        ];
        model.searching = false;
        model.dom = 'Bfrtip';
        model.buttons = [
                    'excel',
                    'csv',
                    'pdf',
                    'print'
                ]

        return model;
    }

    function isDate(str) {
        var dateReg = /^\d{4}[./-]\d{2}[./-]\d{2}T\d{2}:\d{2}:\d{2}$/;
        return dateReg.test(str);
    }

    $('#AdvanceFilter').click(function () {
        ajaxindicatorstart('Loading data.. please wait..');
        GetFiltersPopup();
    });

    function GetFiltersPopup() {
        $.ajax({
            url: "@Url.Action("ShowAdvanceFilter", ((Spartane.Core.Domain.SpartaneObject.SpartaneObject)ViewBag.Object).URL)",
            type: "GET",
        async: true,
        success: function (data) {
            $(".AddEditFiltersModal").html(data);
            $('.AddEditFiltersModal form').data('validator', null);
            $.validator.unobtrusive.parse('.AddEditFiltersModal form');
            $('#AddEditFiltersModal-form').modal('show');
            ajaxindicatorstop();
        },
        error: function () {
            ajaxindicatorstop();
        }
    });
    }
</script>

@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
}

@section Scripts {
    @*@Scripts.Render("~/plugins/automatic-report")*@
    @Scripts.Render("~/Scripts/BootstrapDatePicker/moment.js")
}
