@using System.Collections.Generic
@using Spartane.Web.Areas.Frontal.Models
@using Spartane.Web.Helpers
@model Spartane.Web.Areas.Frontal.Models.Detalle_Familiar_de_VendedorAdvanceSearchModel
@{
    List<SelectListItem> varParentesco = null;
    if (ViewBag.Parentescos != null)
    { varParentesco = (List<SelectListItem>)ViewBag.Parentescos; }    

    var filters = (List<SelectListItem>)ViewBag.Filter;
}
<style>
    .input-validation-error {
        background: rgb(251, 227, 228);
        border: 1px solid #fbc2c4;
        color: #8a1f11;
    }

    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }

</style>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="ibox float-e-margins" id="divAdvanceSearch">
        <div class="ibox-content">
            @using (Html.BeginForm("ShowAdvanceFilter", "Detalle_Familiar_de_Vendedor", FormMethod.Post, new { @id = "frmAdvanceSearch", @role = "form" }))
            {
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Folio</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromFolio, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromFolio" })
                    @Html.ValidationMessageFor(m => m.FromFolio)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToFolio, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToFolio", @data_min = "txtAdvanceFromFolio" })
                    @Html.ValidationMessageFor(m => m.ToFolio)
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Nombre_del_Familiar</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.Nombre_del_FamiliarFilter, filters, new { @class = "form-control", @id = "ddlNombre_del_FamiliarFilter" })
                    @Html.TextBoxFor(m => m.Nombre_del_Familiar, new { @class = "form-control", @type = "text", @id = "txtNombre_del_Familiar" })
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Parentesco</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.ParentescoFilter, filters, new { @class = "form-control", @id = "ddlParentescoFilter" })
                    @Html.TextBoxFor(m => m.AdvanceParentesco, new { @class = "form-control", @type = "text", @id = "txtAdvanceParentesco" })
                    <label class="">@Resources.Resources.OrSelect </label>
                    @if (varParentesco!=null)
                    {
                        @Html.ListBoxFor(m => m.AdvanceParentescoMultiple, varParentesco,
                        new
                        {
                            @class = "form-control chosen-select",
                            @multiple = "multiple",
                            @data_placeholder = "",
                            @style = "width: 350px;",
                            @id = "ddlAdvanceParentesco"
                        });
                    }
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Fecha</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <div class="input-daterange input-group" id="datepicker">
                        <span class="input-group-addon">@Resources.Resources.From</span>
                        @Html.TextBoxFor(m => m.FromFecha, new { @class = "input-sm form-control", @type = "text", @id = "txtAdvanceFromFecha" })
                        @Html.ValidationMessageFor(m => m.FromFecha)
                        <span class="input-group-addon">@Resources.Resources.To</span>
                        @Html.TextBoxFor(m => m.ToFecha, new { @class = "input-sm form-control", @type = "text", @id = "txtAdvanceToFecha" })
                        @Html.ValidationMessageFor(m => m.ToFecha)
                    </div>
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Hora</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    <div class="input-group clockpicker" data-autoclose="true">
                        @Html.TextBoxFor(m => m.FromHora, new { @class = "form-control", @id = "txtAdvanceFromHora" })
                        <span class="input-group-addon">
                            <span class="fa fa-clock-o"></span>
                        </span>
                    </div>
                    <label class="">@Resources.Resources.To: </label>
                    <div class="input-group clockpicker" data-autoclose="true">
                        @Html.TextBoxFor(m => m.ToHora, new { @class = "form-control greaterThanTime", @id = "txtAdvanceToHora", @data_min = "txtAdvanceFromHora" })
                        <span class="input-group-addon">
                            <span class="fa fa-clock-o"></span>
                        </span>
                    </div>
                </div>
		//Boolean Field
                <div class="MarginBottom">
                    <label class="">@Resources.Detalle_Familiar_de_VendedorResources.Con_Vida:</label>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Con_Vida, RadioOptions.NoApply, new { @id = "rdoCon_VidaNoApply" })
                        <label for="rdoCon_VidaNoApply"> @Resources.Resources.NoApply </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Con_Vida, RadioOptions.Yes, new { @id = "rdoCon_Vida1" })
                        <label for="rdoCon_Vida1"> @Resources.Resources.Yes </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Con_Vida, RadioOptions.No, new { @id = "rdoCon_Vida2" })
                        <label for="rdoCon_Vida2">@Resources.Resources.No </label>
                    </div>
                </div>
                <div class="MarginBottom">
                    <label class="">@Resources.Detalle_Familiar_de_VendedorResources.Fotografia:</label>

                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Fotografia, RadioOptions.NoApply, new { @id = "rdoFotografiaNoApply" })
                        <label for="rdoFotografiaNoApply"> @Resources.Resources.NoApply </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Fotografia, RadioOptions.Yes, new { @id = "rdoFotografia1" })
                        <label for="rdoFotografia1"> @Resources.Resources.Yes </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.HasAttachment, RadioOptions.No, new { @id = "rdoFotografia2" })
                        <label for="rdoFotografia2"> @Resources.Resources.No </label>
                    </div>
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Edad</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromEdad, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromEdad" })
                    @Html.ValidationMessageFor(m => m.FromEdad)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToEdad, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToEdad", @data_min = "txtAdvanceFromEdad" })
                    @Html.ValidationMessageFor(m => m.ToEdad)
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Estatura</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromEstatura, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromEstatura" })
                    @Html.ValidationMessageFor(m => m.FromEstatura)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToEstatura, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToEstatura", @data_min = "txtAdvanceFromEstatura" })
                    @Html.ValidationMessageFor(m => m.ToEstatura)
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.Detalle_Familiar_de_VendedorResources.Ingresos_Mensuales</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromIngresos_Mensuales, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromIngresos_Mensuales" })
                    @Html.ValidationMessageFor(m => m.FromIngresos_Mensuales)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToIngresos_Mensuales, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToIngresos_Mensuales", @data_min = "txtAdvanceFromIngresos_Mensuales" })
                    @Html.ValidationMessageFor(m => m.ToIngresos_Mensuales)
                </div>

                <div class="MarginBottom form-inline">
                    <input type="submit" class="btn btn-primary" value="@Resources.Resources.Search"><a class="btn btn-primary" href="@Url.Content("~/Frontal/Detalle_Familiar_de_Vendedor/")" value=" ">@Resources.Resources.Cancelar</a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function InitiateAdvanceSearch() {
        var advanceSearch = {}, hasParameter = false;
        if ($("#txtAdvanceFromFolio").val() != "" || $("#txtAdvanceToFolio").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorFolioFrom = $("#txtAdvanceFromFolio").val();
            advanceSearch.Detalle_Familiar_de_VendedorFolioTo = $("#txtAdvanceToFolio").val();
        }
        if ($("#txtAdvanceNombre_del_Familiar").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorNombre_del_Familiar = $("#txtAdvanceNombre_del_Familiar").val();
            advanceSearch.Detalle_Familiar_de_VendedorNombre_del_FamiliarSearchType = $("#ddlAdvanceNombre_del_FamiliarFilter").val();
        }
        advanceSearch.ParentescoSearchType = 0;
        if ($('#ddlAdvanceParentesco').val().length > 0 || $("#txtAdvanceParentesco").val() == "") {


            if (isDetalle_Familiar_de_VendedorTextSearch) {
                advanceSearch.ParentescoName = $("#txtAdvanceParentesco").val();
                advanceSearch.ParentescoNameSearchType = $("#ddlAdvanceParentesco").val();
                advanceSearch.ParentescoSearchType = 1;
            }
            else {

                advanceSearch.ParentescoToSearch = $("#ddlAdvanceParentesco").val();
                advanceSearch.ParentescoSearchType = 2;
            }
        }
        if ($("#txtAdvanceFromFecha").val() != "" || $("#txtAdvanceToFecha").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorFechaFrom = $("#txtAdvanceFromFecha").val();
            advanceSearch.Detalle_Familiar_de_VendedorFechaTo = $("#txtAdvanceToFecha").val();
        }
        if ($("#txtAdvanceHora").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorHora = $("#txtAdvanceHora").val();
            advanceSearch.Detalle_Familiar_de_VendedorHoraSearchType = $("#ddlAdvanceHoraFilter").val();
        }
        if ($("#ddlAdvanceCon_Vida").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorCon_Vida = $("#ddlAdvanceCon_Vida").val();
        }
        advanceSearch.FotografiaSearchType = 0;
        if ($('#ddlAdvanceFotografia').val().length > 0 || $("#txtAdvanceFotografia").val() == "") {


            if (isDetalle_Familiar_de_VendedorTextSearch) {
                advanceSearch.FotografiaName = $("#txtAdvanceFotografia").val();
                advanceSearch.FotografiaNameSearchType = $("#ddlAdvanceFotografia").val();
                advanceSearch.FotografiaSearchType = 1;
            }
            else {

                advanceSearch.FotografiaToSearch = $("#ddlAdvanceFotografia").val();
                advanceSearch.FotografiaSearchType = 2;
            }
        }
        if ($("#txtAdvanceFromEdad").val() != "" || $("#txtAdvanceToEdad").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorEdadFrom = $("#txtAdvanceFromEdad").val();
            advanceSearch.Detalle_Familiar_de_VendedorEdadTo = $("#txtAdvanceToEdad").val();
        }
        if ($("#txtAdvanceFromEstatura").val() != "" || $("#txtAdvanceToEstatura").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorEstaturaFrom = $("#txtAdvanceFromEstatura").val();
            advanceSearch.Detalle_Familiar_de_VendedorEstaturaTo = $("#txtAdvanceToEstatura").val();
        }
        if ($("#txtAdvanceFromIngresos_Mensuales").val() != "" || $("#txtAdvanceToIngresos_Mensuales").val() != "") {
            hasParameter = true;
            advanceSearch.Detalle_Familiar_de_VendedorIngresos_MensualesFrom = $("#txtAdvanceFromIngresos_Mensuales").val();
            advanceSearch.Detalle_Familiar_de_VendedorIngresos_MensualesTo = $("#txtAdvanceToIngresos_Mensuales").val();
        }

        advanceSearchQuery = hasParameter ? JSON.stringify(advanceSearch) : "";
        $('#tblDetalle_Familiar_de_Vendedor').DataTable().draw();
        return false;
    }

    var advanceSearchQuery = "", isDetalle_Familiar_de_VendedorTextSearch = true;

    $(document).ready(function () {
        $('.clockpicker').clockpicker();
        $("#txtAdvanceParentesco").keypress(function () {
            isDetalle_Familiar_de_VendedorTextSearch = true;
            $("#ddlAdvanceParentesco").val('').trigger("chosen:updated");
        });

        $("#ddlAdvanceParentesco").change(function () {
            isDetalle_Familiar_de_VendedorTextSearch = false;
            $("#txtAdvanceParentesco").val('');
        });

    });
</script>


@section Styles {
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/dateRangeStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/plugins/clockpickerStyles")

}

@section Scripts {
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/clockpicker")


    <script>
        //Adding Rules
        jQuery.validator.unobtrusive
      .adapters.addSingleVal("isnumberafter", "propertyname");
        jQuery.validator.unobtrusive
    .adapters.addSingleVal("isdateafter", "propertyname");

        //Number after method
        jQuery.validator.addMethod("isnumberafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {
                //if (Date.parse(val) <= Date.parse(otherVal)) {
                if (Number(val) < Number(otherVal)) {
                    return false;
                }
                        }
            return true;
        });

        //Date after after method
        jQuery.validator.addMethod("isdateafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {

                if (GetDateObject(val) < GetDateObject(otherVal)) {

                    return false;
                    }
                }
            return true;
            });


        function GetDateObject(value) {
            var delimiter = GetDelimiter(dateFormat);
            var dateCollection = value.split(delimiter);
            var formatCollection = dateFormat.split(delimiter);
            var dateModel = GetDateModel(dateCollection, formatCollection);
            return new Date(dateModel.Year, dateModel.Month - 1, dateModel.Day);
        }
        //Used to get the date model by parsing the date and the format
        function GetDateModel(dateCollection,formatCollection) {
            var day, month, year;
            for (var i = 0; i < formatCollection.length; i++) {
                switch (formatCollection[i][0].toUpperCase()) {
                
                    case "D":
                        day = dateCollection[i];
                        break;

                    case "Y":
                        year = dateCollection[i];
                        break;

                    case "M":
                        month = dateCollection[i];
                        break;
                }
            }

            return {
                Day:day,
                Month:month,
                Year:year
            };
        }

        function GetDelimiter(format) {

            for (var i = 0; i < format.length; i++) {
                if (/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g.test(format[i])) {
                    return format[i];
                }
            }
            return null;
        }

        var dateFormat = "@ConfigurationProperty.DateFormatDatePicker";

        $(document).ready(function () {



            $('.input-daterange').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                format: dateFormat,
                message: 'The date is not a valid'
            });

            $(".chosen-select").chosen({ width: "22%", no_results_text: "Oops, nothing found!" });

        });

    </script>
}

