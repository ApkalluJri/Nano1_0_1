@using System.Collections.Generic
@using Spartane.Web.Areas.Frontal.Models
@using Spartane.Web.Helpers
@model Spartane.Web.Areas.Frontal.Models.VendedorAdvanceSearchModel
@{
    List<SelectListItem> varEmpresa = null;
    if (ViewBag.Empresas != null)
    { varEmpresa = (List<SelectListItem>)ViewBag.Empresas; }    

    var filters = (List<SelectListItem>)ViewBag.Filter;
}
<style>
    .input-validation-error {
        background: rgb(251, 227, 228);
        border: 1px solid #fbc2c4;
        color: #8a1f11;
    }

    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }

</style>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="ibox float-e-margins" id="divAdvanceSearch">
        <div class="ibox-content">
            @using (Html.BeginForm("ShowAdvanceFilter", "Vendedor", FormMethod.Post, new { @id = "frmAdvanceSearch", @role = "form" }))
            {
                <div class="MarginBottom ">
                    <h3>@Resources.VendedorResources.Numero_de_Empleado</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromNumero_de_Empleado, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromNumero_de_Empleado" })
                    @Html.ValidationMessageFor(m => m.FromNumero_de_Empleado)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToNumero_de_Empleado, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToNumero_de_Empleado", @data_min = "txtAdvanceFromNumero_de_Empleado" })
                    @Html.ValidationMessageFor(m => m.ToNumero_de_Empleado)
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.VendedorResources.Nombre</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.NombreFilter, filters, new { @class = "form-control", @id = "ddlNombreFilter" })
                    @Html.TextBoxFor(m => m.Nombre, new { @class = "form-control", @type = "text", @id = "txtNombre" })
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.VendedorResources.Apellidos</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.ApellidosFilter, filters, new { @class = "form-control", @id = "ddlApellidosFilter" })
                    @Html.TextBoxFor(m => m.Apellidos, new { @class = "form-control", @type = "text", @id = "txtApellidos" })
                </div>
		//Boolean Field
                <div class="MarginBottom">
                    <label class="">@Resources.VendedorResources.Activo:</label>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Activo, RadioOptions.NoApply, new { @id = "rdoActivoNoApply" })
                        <label for="rdoActivoNoApply"> @Resources.Resources.NoApply </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Activo, RadioOptions.Yes, new { @id = "rdoActivo1" })
                        <label for="rdoActivo1"> @Resources.Resources.Yes </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Activo, RadioOptions.No, new { @id = "rdoActivo2" })
                        <label for="rdoActivo2">@Resources.Resources.No </label>
                    </div>
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.VendedorResources.Fecha_de_Nacimiento</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <div class="input-daterange input-group" id="datepicker">
                        <span class="input-group-addon">@Resources.Resources.From</span>
                        @Html.TextBoxFor(m => m.FromFecha_de_Nacimiento, new { @class = "input-sm form-control", @type = "text", @id = "txtAdvanceFromFecha_de_Nacimiento" })
                        @Html.ValidationMessageFor(m => m.FromFecha_de_Nacimiento)
                        <span class="input-group-addon">@Resources.Resources.To</span>
                        @Html.TextBoxFor(m => m.ToFecha_de_Nacimiento, new { @class = "input-sm form-control", @type = "text", @id = "txtAdvanceToFecha_de_Nacimiento" })
                        @Html.ValidationMessageFor(m => m.ToFecha_de_Nacimiento)
                    </div>
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.VendedorResources.Hora_de_Entrada</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    <div class="input-group clockpicker" data-autoclose="true">
                        @Html.TextBoxFor(m => m.FromHora_de_Entrada, new { @class = "form-control", @id = "txtAdvanceFromHora_de_Entrada" })
                        <span class="input-group-addon">
                            <span class="fa fa-clock-o"></span>
                        </span>
                    </div>
                    <label class="">@Resources.Resources.To: </label>
                    <div class="input-group clockpicker" data-autoclose="true">
                        @Html.TextBoxFor(m => m.ToHora_de_Entrada, new { @class = "form-control greaterThanTime", @id = "txtAdvanceToHora_de_Entrada", @data_min = "txtAdvanceFromHora_de_Entrada" })
                        <span class="input-group-addon">
                            <span class="fa fa-clock-o"></span>
                        </span>
                    </div>
                </div>
                <div class="MarginBottom">
                    <h3>@Resources.VendedorResources.Empresa</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.Filter:</label>
                    @Html.DropDownListFor(m => m.EmpresaFilter, filters, new { @class = "form-control", @id = "ddlEmpresaFilter" })
                    @Html.TextBoxFor(m => m.AdvanceEmpresa, new { @class = "form-control", @type = "text", @id = "txtAdvanceEmpresa" })
                    <label class="">@Resources.Resources.OrSelect </label>
                    @if (varEmpresa!=null)
                    {
                        @Html.ListBoxFor(m => m.AdvanceEmpresaMultiple, varEmpresa,
                        new
                        {
                            @class = "form-control chosen-select",
                            @multiple = "multiple",
                            @data_placeholder = "",
                            @style = "width: 350px;",
                            @id = "ddlAdvanceEmpresa"
                        });
                    }
                </div>
                <div class="MarginBottom">
                    <label class="">@Resources.VendedorResources.Fotografia:</label>

                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Fotografia, RadioOptions.NoApply, new { @id = "rdoFotografiaNoApply" })
                        <label for="rdoFotografiaNoApply"> @Resources.Resources.NoApply </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.Fotografia, RadioOptions.Yes, new { @id = "rdoFotografia1" })
                        <label for="rdoFotografia1"> @Resources.Resources.Yes </label>
                    </div>
                    <div class="radio radio-inline">
                        @Html.RadioButtonFor(m => m.HasAttachment, RadioOptions.No, new { @id = "rdoFotografia2" })
                        <label for="rdoFotografia2"> @Resources.Resources.No </label>
                    </div>
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.VendedorResources.Peso</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromPeso, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromPeso" })
                    @Html.ValidationMessageFor(m => m.FromPeso)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToPeso, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToPeso", @data_min = "txtAdvanceFromPeso" })
                    @Html.ValidationMessageFor(m => m.ToPeso)
                </div>
                <div class="MarginBottom ">
                    <h3>@Resources.VendedorResources.Sueldo</h3>
                </div>
                <div class="MarginBottom form-inline">
                    <label class="">@Resources.Resources.From:</label>
                    @Html.TextBoxFor(m => m.FromSueldo, new { @class = "form-control greaterThanZero", @type = "text", @id = "txtAdvanceFromSueldo" })
                    @Html.ValidationMessageFor(m => m.FromSueldo)
                    <label class="">@Resources.Resources.To: </label>
                    @Html.TextBoxFor(m => m.ToSueldo, new { @class = "form-control greaterThan greaterThanZero", @type = "text", @id = "txtAdvanceToSueldo", @data_min = "txtAdvanceFromSueldo" })
                    @Html.ValidationMessageFor(m => m.ToSueldo)
                </div>

                <div class="MarginBottom form-inline">
                    <input type="submit" class="btn btn-primary" value="@Resources.Resources.Search"><a class="btn btn-primary" href="@Url.Content("~/Frontal/Vendedor/")" value=" ">@Resources.Resources.Cancelar</a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function InitiateAdvanceSearch() {
        var advanceSearch = {}, hasParameter = false;
        if ($("#txtAdvanceFromNumero_de_Empleado").val() != "" || $("#txtAdvanceToNumero_de_Empleado").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorNumero_de_EmpleadoFrom = $("#txtAdvanceFromNumero_de_Empleado").val();
            advanceSearch.VendedorNumero_de_EmpleadoTo = $("#txtAdvanceToNumero_de_Empleado").val();
        }
        if ($("#txtAdvanceNombre").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorNombre = $("#txtAdvanceNombre").val();
            advanceSearch.VendedorNombreSearchType = $("#ddlAdvanceNombreFilter").val();
        }
        if ($("#txtAdvanceApellidos").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorApellidos = $("#txtAdvanceApellidos").val();
            advanceSearch.VendedorApellidosSearchType = $("#ddlAdvanceApellidosFilter").val();
        }
        if ($("#ddlAdvanceActivo").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorActivo = $("#ddlAdvanceActivo").val();
        }
        if ($("#txtAdvanceFromFecha_de_Nacimiento").val() != "" || $("#txtAdvanceToFecha_de_Nacimiento").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorFecha_de_NacimientoFrom = $("#txtAdvanceFromFecha_de_Nacimiento").val();
            advanceSearch.VendedorFecha_de_NacimientoTo = $("#txtAdvanceToFecha_de_Nacimiento").val();
        }
        if ($("#txtAdvanceHora_de_Entrada").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorHora_de_Entrada = $("#txtAdvanceHora_de_Entrada").val();
            advanceSearch.VendedorHora_de_EntradaSearchType = $("#ddlAdvanceHora_de_EntradaFilter").val();
        }
        advanceSearch.EmpresaSearchType = 0;
        if ($('#ddlAdvanceEmpresa').val().length > 0 || $("#txtAdvanceEmpresa").val() == "") {


            if (isVendedorTextSearch) {
                advanceSearch.EmpresaName = $("#txtAdvanceEmpresa").val();
                advanceSearch.EmpresaNameSearchType = $("#ddlAdvanceEmpresa").val();
                advanceSearch.EmpresaSearchType = 1;
            }
            else {

                advanceSearch.EmpresaToSearch = $("#ddlAdvanceEmpresa").val();
                advanceSearch.EmpresaSearchType = 2;
            }
        }
        advanceSearch.FotografiaSearchType = 0;
        if ($('#ddlAdvanceFotografia').val().length > 0 || $("#txtAdvanceFotografia").val() == "") {


            if (isVendedorTextSearch) {
                advanceSearch.FotografiaName = $("#txtAdvanceFotografia").val();
                advanceSearch.FotografiaNameSearchType = $("#ddlAdvanceFotografia").val();
                advanceSearch.FotografiaSearchType = 1;
            }
            else {

                advanceSearch.FotografiaToSearch = $("#ddlAdvanceFotografia").val();
                advanceSearch.FotografiaSearchType = 2;
            }
        }
        if ($("#txtAdvanceFromPeso").val() != "" || $("#txtAdvanceToPeso").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorPesoFrom = $("#txtAdvanceFromPeso").val();
            advanceSearch.VendedorPesoTo = $("#txtAdvanceToPeso").val();
        }
        if ($("#txtAdvanceFromSueldo").val() != "" || $("#txtAdvanceToSueldo").val() != "") {
            hasParameter = true;
            advanceSearch.VendedorSueldoFrom = $("#txtAdvanceFromSueldo").val();
            advanceSearch.VendedorSueldoTo = $("#txtAdvanceToSueldo").val();
        }

        advanceSearchQuery = hasParameter ? JSON.stringify(advanceSearch) : "";
        $('#tblVendedor').DataTable().draw();
        return false;
    }

    var advanceSearchQuery = "", isVendedorTextSearch = true;

    $(document).ready(function () {
        $('.clockpicker').clockpicker();
        $("#txtAdvanceEmpresa").keypress(function () {
            isVendedorTextSearch = true;
            $("#ddlAdvanceEmpresa").val('').trigger("chosen:updated");
        });

        $("#ddlAdvanceEmpresa").change(function () {
            isVendedorTextSearch = false;
            $("#txtAdvanceEmpresa").val('');
        });

    });
</script>


@section Styles {
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/plugins/dateRangeStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/plugins/clockpickerStyles")

}

@section Scripts {
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/clockpicker")


    <script>
        //Adding Rules
        jQuery.validator.unobtrusive
      .adapters.addSingleVal("isnumberafter", "propertyname");
        jQuery.validator.unobtrusive
    .adapters.addSingleVal("isdateafter", "propertyname");

        //Number after method
        jQuery.validator.addMethod("isnumberafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {
                //if (Date.parse(val) <= Date.parse(otherVal)) {
                if (Number(val) < Number(otherVal)) {
                    return false;
                }
                        }
            return true;
        });

        //Date after after method
        jQuery.validator.addMethod("isdateafter", function (val, element, other) {
            var modelPrefix = element.name.substr(
                0, element.name.lastIndexOf(".") + 1);
            var otherVal = $("[name=" + modelPrefix + other + "]").val();
            if (val && otherVal) {

                if (GetDateObject(val) < GetDateObject(otherVal)) {

                    return false;
                    }
                }
            return true;
            });


        function GetDateObject(value) {
            var delimiter = GetDelimiter(dateFormat);
            var dateCollection = value.split(delimiter);
            var formatCollection = dateFormat.split(delimiter);
            var dateModel = GetDateModel(dateCollection, formatCollection);
            return new Date(dateModel.Year, dateModel.Month - 1, dateModel.Day);
        }
        //Used to get the date model by parsing the date and the format
        function GetDateModel(dateCollection,formatCollection) {
            var day, month, year;
            for (var i = 0; i < formatCollection.length; i++) {
                switch (formatCollection[i][0].toUpperCase()) {
                
                    case "D":
                        day = dateCollection[i];
                        break;

                    case "Y":
                        year = dateCollection[i];
                        break;

                    case "M":
                        month = dateCollection[i];
                        break;
                }
            }

            return {
                Day:day,
                Month:month,
                Year:year
            };
        }

        function GetDelimiter(format) {

            for (var i = 0; i < format.length; i++) {
                if (/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g.test(format[i])) {
                    return format[i];
                }
            }
            return null;
        }

        var dateFormat = "@ConfigurationProperty.DateFormatDatePicker";

        $(document).ready(function () {



            $('.input-daterange').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                format: dateFormat,
                message: 'The date is not a valid'
            });

            $(".chosen-select").chosen({ width: "22%", no_results_text: "Oops, nothing found!" });

        });

    </script>
}

